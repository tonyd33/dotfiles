#!/bin/sh

# Variable declarations {{{
cache_expiry_seconds=86400 # 24 hours
progname=${0##*/}
refresh_cache=false
cache_file="$HOME/.bwcache"

now=$(date +%s)

declare -A map
# }}}

# Function definitions {{{
help_text() {
    while IFS= read -r line; do
        printf "%s\n" "$line"
    done <<-EOF
Usage:
    ${progname} [OPTIONS...] <subcommand>

Options:
    -h, --help        Prints this help message
    -r, --refresh     Force refresh cache
    -c, --cache=CACHE Custom cache path

Subcommands:
    get    Gets an item using dmenu
    create Creates an item using dmenu
EOF
}

unlock_bitwarden() {
    source ~/.bitwardenenv
    export BW_SESSION=$(
        bw unlock --passwordenv BW_PASSWORD |\
        grep export |\
        cut -d'"' -f 2
    )
}

send_notification() {
    notify-send -a $progname "$1"
}

add_item_to_map() {
    name=$1
    value=$2
    num=0
    key="$name"
    while [ -v map["$key"] ]; do
        ((num++))
        key="$name $num"
    done
    map["$key"]=$value
}

get_item() {
    last_modified=$(
        [ -f $cache_file ] &&\
        stat -c "%Y" $cache_file ||\
        echo 0
    )
    items=""
    if [ $(($now-$last_modified)) -gt $cache_expiry_seconds ] ||\
        [ $refresh_cache = true ]; then
        unlock_bitwarden
        items=$(bw list items)
        echo $items > $cache_file
        send_notification "Updated bitwarden cache"
    else
        items=$(cat $cache_file)
    fi

    info=$(
        echo $items |\
        jq -j 'map([.name,.login.username,.login.password,.id] | join(",")) | join("\n")'
    )

    while IFS= read -r line; do
        title=$(echo $line | awk -F ',' '{print $1}')
        username=$(echo $line | awk -F ',' '{print $2}')
        password=$(echo $line | awk -F ',' '{print $3}')
        item_id=$(echo $line | awk -F ',' '{print $4}')

        key="${title}||${username}"
        value="$username $password"

        add_item_to_map "$key" "$value"
    done <<< $info

    output=""
    for key in "${!map[@]}"; do
        output="$key\n$output"
    done

    selection=$(echo -e $output | dmenu -i -p "Select an item" -l 5)

    [ -z $selection ] &&\
        send_notification "Operation canceled by user." &&\
        exit

    [ ! -v map["$selection"] ] &&\
        send_notification "Failed to retrieve data." &&\
        exit 1

    data_to_retrieve=$(
        echo -e "username\npassword" |\
        dmenu -i -p "Get"
    )
    command=""

    # TODO: Uncancer this and get more options
    case $data_to_retrieve in
        username) command='{print $1}';;
        password) command='{print $2}';;
        *) command='{print $1}';;
    esac

    echo ${map["$selection"]} |\
        awk "$command" |\
        xclip -sel clip
    send_notification "Password copied successfully."
}


create_item() {
    unlock_bitwarden

    name=$(echo | dmenu -i -p "Name:")
    uri=$(echo | dmenu -i -p "URI:")
    username=$(echo | dmenu -i -p "Username:")
    password_flags=$(echo | dmenu -i -p "Password flags:")
    # If blank, set default flags
    password_flags=$([ -n $password_flags ] && $password_flags || "-ulns --length 16")
    password=$(bw generate $password_flags)

    # Copy the password first and say that we've done so since saving can
    # take some time
    echo $password | xclip -sel clip
    send_notification "Password saved to clipboard."

    bw get template item |\
        jq ".name=\"$name\"|.login=$(bw get template item.login |\
        jq ".username=\"$username\"|.password=\"$password\"|.totp=\"\"|.uris=[\"$uri\"]")|.notes=\"\"" |\
        bw encode |\
        bw create item || send_notification "Item wasn't saved."
}
# }}}

# Start program {{{
eval set -- $(getopt -a -n $progname -o 'hrc:' --long help,refresh,cache: -- "$@")

while :;do
    case $1 in
        -r | --refresh)
            refresh_cache=true
            shift
            ;;
        -c | --cache)
            cache_file=$2
            shift 2
            ;;
        --)
            shift
            break
            ;;
        *)
            help_text
            exit 1
            ;;
    esac
done

while [ $# -gt 0 ]; do
    case $1 in
        get)
            get_item
            shift
            ;;
        create)
            create_item
            shift
            ;;
        *)
            help_text
            exit 1
            ;;
    esac
done
# }}}

